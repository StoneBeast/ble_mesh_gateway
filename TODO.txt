1. 整体设计均采用 '一个节点，一个元素，两个模型' 的模式
2. 两个模型均使用 'config server' 以及 'vendor server'
3. 用户行为接入只在开关prov、以及完成配置后对节点的设置，其他操作对用户保持黑盒状态
4. 不同类型的设备中，vendor server模型支持的操作不同，但都应包含 get device info 的操作，在设备
   被配置完成后，由vendor client发送，意在获取设备的具体信息，例如 类型、名称等
5. 不同类型设备有不同的接口，被提前设定好，用户在进行设备匹配时，直接引用接口文件，对相关功能函数进行
   实现即可。
6. 在ble mesh层面，对于node的结构体处理可以采用嵌套的处理，将一个设备包含的不同功能组合进一个结构体，可以使用
   id区分，即为事先是配好的设备例如：
   以一个风扇为例，假设风扇包含 风扇开关、   风速调节、    灯光开关、   亮度调节、  电量显示 五个功能，那么该设备可表示为：
                  05 0001 [F1100001] [0121004C] [F2300001] [02410032] [FF510078]
   [0:7]: 功能数量n
   [8:23]: id,也可以理解为产品id，即事先设定好，超出模板的功能可被理解为拓展功能，供用户自定义
   [8+16:32*n+7+16]: 具体功能
      [0:15] : 数据
      [16:19]: 数据类型，onoff(0)/data(1)/...(2-f)
      [20:23]: 绑定操作界面的id, 例如，操作界面上某个按钮的id为01,则按钮会可以更改id同为01的值
      [24:31]: 间数据绑定关系
         [0:14]: band_id, 两个band_id相同的数据会相互绑定 (0xff)为不绑定
         [15]  : 表示主从数据类型，为1则为主数据，即主数据可以改变从数据，例如电灯开关以及亮度，开关为从数据
                 亮度则为主数据，即开关的状态可以随着亮度的变化而变化，反之则不行。

可以尝试使用 config_client 更新netkey